<?php

namespace PayPal\StructType;

use \WsdlToPhp\PackageBase\AbstractStructBase;

/**
 * This class stands for CoupledPaymentInfoType StructType
 * Meta information extracted from the WSDL
 * - documentation: Information about Coupled Payment transactions.
 * @subpackage Structs
 * @author WsdlToPhp <contact@wsdltophp.com>
 */
class CoupledPaymentInfoType extends AbstractStructBase
{
    /**
     * The CoupledPaymentID
     * Meta information extracted from the WSDL
     * - documentation: ID that uniquely identifies this CoupledPayment. Generated by PP in Response
     * - maxOccurs: 1
     * - minOccurs: 1
     * @var string
     */
    public $CoupledPaymentID;
    /**
     * The CoupledPaymentRequestID
     * Meta information extracted from the WSDL
     * - documentation: ID received in the Coupled Payment Request
     * - maxOccurs: 1
     * - minOccurs: 0
     * @var string
     */
    public $CoupledPaymentRequestID;
    /**
     * Constructor method for CoupledPaymentInfoType
     * @uses CoupledPaymentInfoType::setCoupledPaymentID()
     * @uses CoupledPaymentInfoType::setCoupledPaymentRequestID()
     * @param string $coupledPaymentID
     * @param string $coupledPaymentRequestID
     */
    public function __construct($coupledPaymentID = null, $coupledPaymentRequestID = null)
    {
        $this
            ->setCoupledPaymentID($coupledPaymentID)
            ->setCoupledPaymentRequestID($coupledPaymentRequestID);
    }
    /**
     * Get CoupledPaymentID value
     * @return string
     */
    public function getCoupledPaymentID()
    {
        return $this->CoupledPaymentID;
    }
    /**
     * Set CoupledPaymentID value
     * @param string $coupledPaymentID
     * @return \PayPal\StructType\CoupledPaymentInfoType
     */
    public function setCoupledPaymentID($coupledPaymentID = null)
    {
        // validation for constraint: string
        if (!is_null($coupledPaymentID) && !is_string($coupledPaymentID)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($coupledPaymentID, true), gettype($coupledPaymentID)), __LINE__);
        }
        $this->CoupledPaymentID = $coupledPaymentID;
        return $this;
    }
    /**
     * Get CoupledPaymentRequestID value
     * @return string|null
     */
    public function getCoupledPaymentRequestID()
    {
        return $this->CoupledPaymentRequestID;
    }
    /**
     * Set CoupledPaymentRequestID value
     * @param string $coupledPaymentRequestID
     * @return \PayPal\StructType\CoupledPaymentInfoType
     */
    public function setCoupledPaymentRequestID($coupledPaymentRequestID = null)
    {
        // validation for constraint: string
        if (!is_null($coupledPaymentRequestID) && !is_string($coupledPaymentRequestID)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($coupledPaymentRequestID, true), gettype($coupledPaymentRequestID)), __LINE__);
        }
        $this->CoupledPaymentRequestID = $coupledPaymentRequestID;
        return $this;
    }
}
