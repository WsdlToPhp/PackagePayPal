<?php

namespace PayPal\StructType;

use \WsdlToPhp\PackageBase\AbstractStructBase;

/**
 * This class stands for SubscriptionInfoType StructType
 * Meta informations extracted from the WSDL
 * - documentation: SubscriptionInfoType Information about a PayPal Subscription. | ID generated by PayPal for the subscriber. Character length and limitations: no limit
 * @subpackage Structs
 * @author WsdlToPhp <contact@wsdltophp.com>
 */
class SubscriptionInfoType extends AbstractStructBase
{
    /**
     * The reattempt
     * Meta informations extracted from the WSDL
     * - use: required
     * @var string
     */
    public $reattempt;
    /**
     * The recurring
     * Meta informations extracted from the WSDL
     * - use: required
     * @var string
     */
    public $recurring;
    /**
     * The SubscriptionID
     * Meta informations extracted from the WSDL
     * - ref: ns:SubscriptionID
     * @var string
     */
    public $SubscriptionID;
    /**
     * The SubscriptionDate
     * Meta informations extracted from the WSDL
     * - documentation: Subscription start date
     * - minOccurs: 0
     * @var string
     */
    public $SubscriptionDate;
    /**
     * The EffectiveDate
     * Meta informations extracted from the WSDL
     * - documentation: Date when the subscription modification will be effective
     * - minOccurs: 0
     * @var string
     */
    public $EffectiveDate;
    /**
     * The RetryTime
     * Meta informations extracted from the WSDL
     * - documentation: Date PayPal will retry a failed subscription payment
     * - minOccurs: 0
     * @var string
     */
    public $RetryTime;
    /**
     * The Username
     * Meta informations extracted from the WSDL
     * - documentation: Username generated by PayPal and given to subscriber to access the subscription. Character length and limitations: 64 alphanumeric single-byte characters
     * - minOccurs: 0
     * @var string
     */
    public $Username;
    /**
     * The Password
     * Meta informations extracted from the WSDL
     * - documentation: Password generated by PayPal and given to subscriber to access the subscription. For security, the value of the password is hashed. Character length and limitations: 128 alphanumeric single-byte characters
     * - minOccurs: 0
     * @var string
     */
    public $Password;
    /**
     * The Recurrences
     * Meta informations extracted from the WSDL
     * - documentation: The number of payment installments that will occur at the regular rate. Character length and limitations: no limit
     * - minOccurs: 0
     * @var string
     */
    public $Recurrences;
    /**
     * The Terms
     * Meta informations extracted from the WSDL
     * - documentation: Subscription duration and charges
     * - maxOccurs: unbounded
     * - minOccurs: 0
     * @var \PayPal\StructType\SubscriptionTermsType[]
     */
    public $Terms;
    /**
     * Constructor method for SubscriptionInfoType
     * @uses SubscriptionInfoType::setReattempt()
     * @uses SubscriptionInfoType::setRecurring()
     * @uses SubscriptionInfoType::setSubscriptionID()
     * @uses SubscriptionInfoType::setSubscriptionDate()
     * @uses SubscriptionInfoType::setEffectiveDate()
     * @uses SubscriptionInfoType::setRetryTime()
     * @uses SubscriptionInfoType::setUsername()
     * @uses SubscriptionInfoType::setPassword()
     * @uses SubscriptionInfoType::setRecurrences()
     * @uses SubscriptionInfoType::setTerms()
     * @param string $reattempt
     * @param string $recurring
     * @param string $subscriptionID
     * @param string $subscriptionDate
     * @param string $effectiveDate
     * @param string $retryTime
     * @param string $username
     * @param string $password
     * @param string $recurrences
     * @param \PayPal\StructType\SubscriptionTermsType[] $terms
     */
    public function __construct($reattempt = null, $recurring = null, $subscriptionID = null, $subscriptionDate = null, $effectiveDate = null, $retryTime = null, $username = null, $password = null, $recurrences = null, array $terms = array())
    {
        $this
            ->setReattempt($reattempt)
            ->setRecurring($recurring)
            ->setSubscriptionID($subscriptionID)
            ->setSubscriptionDate($subscriptionDate)
            ->setEffectiveDate($effectiveDate)
            ->setRetryTime($retryTime)
            ->setUsername($username)
            ->setPassword($password)
            ->setRecurrences($recurrences)
            ->setTerms($terms);
    }
    /**
     * Get reattempt value
     * @return string
     */
    public function getReattempt()
    {
        return $this->reattempt;
    }
    /**
     * Set reattempt value
     * @param string $reattempt
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setReattempt($reattempt = null)
    {
        // validation for constraint: string
        if (!is_null($reattempt) && !is_string($reattempt)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($reattempt)), __LINE__);
        }
        $this->reattempt = $reattempt;
        return $this;
    }
    /**
     * Get recurring value
     * @return string
     */
    public function getRecurring()
    {
        return $this->recurring;
    }
    /**
     * Set recurring value
     * @param string $recurring
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setRecurring($recurring = null)
    {
        // validation for constraint: string
        if (!is_null($recurring) && !is_string($recurring)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($recurring)), __LINE__);
        }
        $this->recurring = $recurring;
        return $this;
    }
    /**
     * Get SubscriptionID value
     * @return string|null
     */
    public function getSubscriptionID()
    {
        return $this->SubscriptionID;
    }
    /**
     * Set SubscriptionID value
     * @param string $subscriptionID
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setSubscriptionID($subscriptionID = null)
    {
        // validation for constraint: string
        if (!is_null($subscriptionID) && !is_string($subscriptionID)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($subscriptionID)), __LINE__);
        }
        $this->SubscriptionID = $subscriptionID;
        return $this;
    }
    /**
     * Get SubscriptionDate value
     * @return string|null
     */
    public function getSubscriptionDate()
    {
        return $this->SubscriptionDate;
    }
    /**
     * Set SubscriptionDate value
     * @param string $subscriptionDate
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setSubscriptionDate($subscriptionDate = null)
    {
        // validation for constraint: string
        if (!is_null($subscriptionDate) && !is_string($subscriptionDate)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($subscriptionDate)), __LINE__);
        }
        $this->SubscriptionDate = $subscriptionDate;
        return $this;
    }
    /**
     * Get EffectiveDate value
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->EffectiveDate;
    }
    /**
     * Set EffectiveDate value
     * @param string $effectiveDate
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setEffectiveDate($effectiveDate = null)
    {
        // validation for constraint: string
        if (!is_null($effectiveDate) && !is_string($effectiveDate)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($effectiveDate)), __LINE__);
        }
        $this->EffectiveDate = $effectiveDate;
        return $this;
    }
    /**
     * Get RetryTime value
     * @return string|null
     */
    public function getRetryTime()
    {
        return $this->RetryTime;
    }
    /**
     * Set RetryTime value
     * @param string $retryTime
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setRetryTime($retryTime = null)
    {
        // validation for constraint: string
        if (!is_null($retryTime) && !is_string($retryTime)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($retryTime)), __LINE__);
        }
        $this->RetryTime = $retryTime;
        return $this;
    }
    /**
     * Get Username value
     * @return string|null
     */
    public function getUsername()
    {
        return $this->Username;
    }
    /**
     * Set Username value
     * @param string $username
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setUsername($username = null)
    {
        // validation for constraint: string
        if (!is_null($username) && !is_string($username)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($username)), __LINE__);
        }
        $this->Username = $username;
        return $this;
    }
    /**
     * Get Password value
     * @return string|null
     */
    public function getPassword()
    {
        return $this->Password;
    }
    /**
     * Set Password value
     * @param string $password
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setPassword($password = null)
    {
        // validation for constraint: string
        if (!is_null($password) && !is_string($password)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($password)), __LINE__);
        }
        $this->Password = $password;
        return $this;
    }
    /**
     * Get Recurrences value
     * @return string|null
     */
    public function getRecurrences()
    {
        return $this->Recurrences;
    }
    /**
     * Set Recurrences value
     * @param string $recurrences
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setRecurrences($recurrences = null)
    {
        // validation for constraint: string
        if (!is_null($recurrences) && !is_string($recurrences)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($recurrences)), __LINE__);
        }
        $this->Recurrences = $recurrences;
        return $this;
    }
    /**
     * Get Terms value
     * @return \PayPal\StructType\SubscriptionTermsType[]|null
     */
    public function getTerms()
    {
        return $this->Terms;
    }
    /**
     * Set Terms value
     * @throws \InvalidArgumentException
     * @param \PayPal\StructType\SubscriptionTermsType[] $terms
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function setTerms(array $terms = array())
    {
        foreach ($terms as $subscriptionInfoTypeTermsItem) {
            // validation for constraint: itemType
            if (!$subscriptionInfoTypeTermsItem instanceof \PayPal\StructType\SubscriptionTermsType) {
                throw new \InvalidArgumentException(sprintf('The Terms property can only contain items of \PayPal\StructType\SubscriptionTermsType, "%s" given', is_object($subscriptionInfoTypeTermsItem) ? get_class($subscriptionInfoTypeTermsItem) : gettype($subscriptionInfoTypeTermsItem)), __LINE__);
            }
        }
        $this->Terms = $terms;
        return $this;
    }
    /**
     * Add item to Terms value
     * @throws \InvalidArgumentException
     * @param \PayPal\StructType\SubscriptionTermsType $item
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public function addToTerms(\PayPal\StructType\SubscriptionTermsType $item)
    {
        // validation for constraint: itemType
        if (!$item instanceof \PayPal\StructType\SubscriptionTermsType) {
            throw new \InvalidArgumentException(sprintf('The Terms property can only contain items of \PayPal\StructType\SubscriptionTermsType, "%s" given', is_object($item) ? get_class($item) : gettype($item)), __LINE__);
        }
        $this->Terms[] = $item;
        return $this;
    }
    /**
     * Method called when an object has been exported with var_export() functions
     * It allows to return an object instantiated with the values
     * @see AbstractStructBase::__set_state()
     * @uses AbstractStructBase::__set_state()
     * @param array $array the exported values
     * @return \PayPal\StructType\SubscriptionInfoType
     */
    public static function __set_state(array $array)
    {
        return parent::__set_state($array);
    }
    /**
     * Method returning the class name
     * @return string __CLASS__
     */
    public function __toString()
    {
        return __CLASS__;
    }
}
